// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v6.30.0--rc1
// source: push/v1/push.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationPushGetOnlineStatus = "/api.push.v1.Push/GetOnlineStatus"

type PushHTTPServer interface {
	GetOnlineStatus(context.Context, *GetOnlineStatusRequest) (*GetOnlineStatusReply, error)
}

func RegisterPushHTTPServer(s *http.Server, srv PushHTTPServer) {
	r := s.Route("/")
	r.GET("/push/status", _Push_GetOnlineStatus0_HTTP_Handler(srv))
}

func _Push_GetOnlineStatus0_HTTP_Handler(srv PushHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetOnlineStatusRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPushGetOnlineStatus)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetOnlineStatus(ctx, req.(*GetOnlineStatusRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetOnlineStatusReply)
		return ctx.Result(200, reply)
	}
}

type PushHTTPClient interface {
	GetOnlineStatus(ctx context.Context, req *GetOnlineStatusRequest, opts ...http.CallOption) (rsp *GetOnlineStatusReply, err error)
}

type PushHTTPClientImpl struct {
	cc *http.Client
}

func NewPushHTTPClient(client *http.Client) PushHTTPClient {
	return &PushHTTPClientImpl{client}
}

func (c *PushHTTPClientImpl) GetOnlineStatus(ctx context.Context, in *GetOnlineStatusRequest, opts ...http.CallOption) (*GetOnlineStatusReply, error) {
	var out GetOnlineStatusReply
	pattern := "/push/status"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPushGetOnlineStatus))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
